package com.game.admin.controllers;

import java.net.MalformedURLException;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;

import net.paoding.rose.web.annotation.Param;

import org.python.google.common.collect.Lists;
import org.springframework.beans.factory.annotation.Autowired;

import com.caucho.hessian.client.HessianProxyFactory;
import com.game.admin.dto.instance.InstanceDto;
import com.game.admin.eventbus.LogEventController;
import com.game.admin.eventbus.type.UserEvent;
import com.game.admin.pojo.NineDay;
import com.game.admin.pojo.PataInstanceData;
import com.game.admin.service.instance.IInstanceService;
import com.game.admin.utils.OperateLogInfos;
import com.game.admin.utils.ResultCode;
import com.game.api.hessian.HeroService;
import com.game.util.ObjectUtil;
import com.game.util.StringUtil;

/**
 * 副本控制器
 * @author zhangyaping email:yapingzhang_beta@163.com
 *
 */
public class InstanceController extends BaseController {
	@Autowired
	private IInstanceService instanceService;

	/**
	 * 取所有副本下拉列表
	 * @param q
	 * @return
	 */
	public Object getallinstance(@Param("q") String q) {
		List<InstanceDto> list = instanceService.getByName(q, 0, 10);
		return ResultCode.writeJson(list);
	}
	
	/**
	 * 刷新内存数据
	 * @return
	 */
	public Object refresh() {
		instanceService.initInstance();
		return ResultCode.succ("副本数据刷新成功");
	}
	
	/**
	 * 取爬塔副本下拉列表
	 */
	public Object getAllPata(@Param("q") String q){
		List<PataInstanceData> list = instanceService.get_all_pata();
		Collections.sort(list, new Comparator<PataInstanceData>(){
			
			public int compare(PataInstanceData o1, PataInstanceData o2) {
				if (o1.getId()<o2.getId()) {
					return -1;
				} else if (o1.getId()>o2.getId()) {
					return 1;
				} 
				return 0;
			}});
		return ResultCode.writeJson(list);
	}
	/**
	 * 所有完成的爬塔副本
	 * @param serverId
	 * @param heroId
	 * @return
	 */
	public Object getCompletePata(@Param("serverId") int serverId,@Param("heroId") String heroId){
		if(null == heroId || "".equals(heroId)){
			return ResultCode.error("角色获取失败");
		}
		HessianProxyFactory factory = new HessianProxyFactory();
		factory.setOverloadEnabled(true);
		{
			String url = buildUrl(serverId, "/game-server/api/service/accounthero");
			try {
				HeroService heroService = (HeroService)factory.create(HeroService.class,url);
				if(null == heroService){
					logger.error("不存在的api");
					return ResultCode.error("获取远程接口为空！");
				}else {
					List<Integer> result= heroService.getCompletedInstances(heroId);
					if(null == result || result.isEmpty()){
						return ResultCode.error("获取结果为空");
					}
					
					List<PataInstanceData> list = getCompleteList(result.get(0));
				
					Collections.sort(list, new Comparator<PataInstanceData>(){
						
						public int compare(PataInstanceData o1, PataInstanceData o2) {
							if (o1.getId()<o2.getId()) {
								return -1;
							} else if (o1.getId()>o2.getId()) {
								return 1;
							} 
							return 0;
						}});
					return ResultCode.writeJson(list);
				}
			} catch (MalformedURLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return Collections.emptyList();
	}
	/**
	 * 已完成的爬塔之前的塔集合
	 * @param completePataId 当前爬塔副本Id
	 * @return
	 */
	public List<PataInstanceData> getCompleteList(int completePataId){
		
		List<PataInstanceData> completePata =Lists.newArrayList();
		if(	1 == completePataId){
			completePata.add(new PataInstanceData(0,"爬塔副本未开启",0));
			return completePata;
		}
		List<PataInstanceData> allList= instanceService.get_all_pata();

		for(PataInstanceData pata:allList){
			if(completePataId >= pata.getId()){
				completePata.add(new PataInstanceData(pata.getId(),pata.getName(),pata.getDifficult()));
			}
		}
		return completePata;
	}
	
	/**
	 * 已完成的九重天之前集合
	 * @param completenineId 当前九重天副本Id
	 * @return
	 */
	public List<NineDay> getCompleteNineDayList(int completeNineDayId){
		
		List<NineDay> completeNineDay =Lists.newArrayList();
		if(	1 == completeNineDayId){
			completeNineDay.add(new NineDay(0, "九重天副本未开启"));
			return completeNineDay;
		}
		List<NineDay> allList= instanceService.get_all_nineDays();

		for(NineDay nineDay:allList){
			if(completeNineDayId >= nineDay.getId()){
				completeNineDay.add(new NineDay(nineDay.getId(), nineDay.getName()));
			}
		}
		return completeNineDay;
	}
	
	
	/**
	 * 取所有九重天副本下拉列表
	 */
	public Object getAllNineDays(@Param("q") String q){
		List<NineDay> list = instanceService.get_all_nineDays();
		Collections.sort(list, new Comparator<NineDay>(){
			public int compare(NineDay o1, NineDay o2) {
				if (o1.getId()<o2.getId()) {
					return -1;
				} else if (o1.getId()>o2.getId()) {
					return 1;
				} 
				return 0;
			}});
		return ResultCode.writeJson(list);
	}
	
	/**
	 * 所有完成的九重天
	 * @param serverId
	 * @param heroId
	 * @return
	 */
	public Object getCompleteNineDays(@Param("serverId") int serverId,@Param("heroId") String heroId){
		if(StringUtil.isEmpty(heroId)){
			return ResultCode.error("角色获取失败");
		}
		HessianProxyFactory factory = new HessianProxyFactory();
		factory.setOverloadEnabled(true);
		{
			String url = buildUrl(serverId, "/game-server/api/service/accounthero");
			try {
				HeroService heroService = (HeroService)factory.create(HeroService.class,url);
				if(null == heroService){
					logger.error("不存在的api");
					return ResultCode.error("获取远程接口为空！");
				}else {
					List<Integer> result = heroService.getCompletedNineDay(heroId);
					if(null == result || result.isEmpty()){
						return ResultCode.error("获取结果为空");
					}
					List<NineDay> list = getCompleteNineDayList(result.get(0));
					Collections.sort(list, new Comparator<NineDay>(){
						
						public int compare(NineDay o1, NineDay o2) {
							if (o1.getId()<o2.getId()) {
								return -1;
							} else if (o1.getId()>o2.getId()) {
								return 1;
							} 
							return 0;
						}});
					return ResultCode.writeJson(list);
				}
			} catch (MalformedURLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return Collections.emptyList();
	}
	
	
	
	
	
	
	
	
	/**
	 所有完成的剧情副本
	 * @param q
	 * @return
	 */
	public Object getComplete_JuQing_allinstance(@Param("pid") int pid, @Param("serverId") int serverId,
			@Param("heroId") String heroId) {
		
		/*serverId = ResourceUtil.getServerId();*/
		if (null == heroId || "".equals(heroId)) {
			return ResultCode.error("参数错误heroId");
		}
		HessianProxyFactory factory = new HessianProxyFactory();
		factory.setOverloadEnabled(true); 
		{
			String url = buildUrl(serverId, "/game-server/api/service/accounthero");
			try {
				HeroService heroService = (HeroService) factory.create(HeroService.class, url);
				if (null == heroService) {
					logger.error("不存在的api");
					return ResultCode.error("不存在的api");
				} else {
					//(int serverId,int pageSize,int page);
					//这块远程 获取回来的是玩家当前的爬塔副本Id,和之前的爬塔副本有顺序  60层塔
					List<Integer> result = heroService.getCompletedInstances(heroId);
					List<InstanceDto> list = Lists.newArrayList();
					if(null ==result){
						return ResultCode.error("获取结果为空");
					}
					for (Iterator<Integer> iterator = result.iterator(); iterator.hasNext();) {
						Integer instanceId = iterator.next();
						list.add(new InstanceDto(instanceId, instanceService.get(instanceId).getName(), 0));
					}
					
					Collections.sort(list, new Comparator<InstanceDto>(){

						@Override
						public int compare(InstanceDto o1, InstanceDto o2) {
							if (o1.getId()<o2.getId()) {
								return -1;
							} else if (o1.getId()>o2.getId()) {
								return 1;
							} 
							return 0;
						}});
					
					return ResultCode.writeJson(list);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return ResultCode.error("api出错，操作失败");
	}
	/**
	 *  所有剧情副本
	 * @param q
	 * @return
	 */
	public Object getJuQing_allinstance(@Param("q") String q) {
		
		System.out.println(q);
		List<InstanceDto> list = instanceService.getList_juqing_instance();
		Collections.sort(list, new Comparator<InstanceDto>(){
		
			public int compare(InstanceDto o1, InstanceDto o2) {
				if (o1.getId()<o2.getId()) {
					return -1;
				} else if (o1.getId()>o2.getId()) {
					return 1;
				} 
				return 0;
			}});
		return ResultCode.writeJson(list);
	}
	/**
	 * 爬塔副本跳塔完成
	 * @param pid
	 * @param serverId
	 * @param heroId
	 * @param mainInstanceId
	 * @return
	 */
	public Object perfectInstances(@Param("pid") int pid, @Param("serverId") int serverId,
			@Param("heroId") String heroId,@Param("mainInstanceId") int mainInstanceId) {
		if (null == heroId || "".equals(heroId)) {
			return ResultCode.error("参数错误heroId");
		}
		if( 0 == mainInstanceId ){
			return ResultCode.error("选择爬塔副本为空");
		}
		HessianProxyFactory factory = new HessianProxyFactory();
		factory.setOverloadEnabled(true); 
		{
			String url = buildUrl(serverId, "/game-server/api/service/accounthero");
			try {	
				HeroService heroService = (HeroService) factory.create(HeroService.class, url);
				if (null == heroService) {
					logger.error("不存在的api");
					return ResultCode.error("不存在的api");
				} else {
					int result = heroService.perfectInstance(heroId,mainInstanceId);
					if (result == 1) {
						logger.error(String.format("账号【%s】不存在", heroId));
						recordOperateLog(String.format(OperateLogInfos.InstanceControllerPerfectInstances,heroId,mainInstanceId,
								getSessionInfo().getIp(),getByIdServerName(serverId)), 2);
						return ResultCode.error(String.format("账号【%s】不存在", heroId));
					}if(result == 2){
						logger.error("所选的玩家副本玩家已经完成");
						recordOperateLog(String.format(OperateLogInfos.InstanceControllerPerfectInstances,heroId,mainInstanceId,
								getSessionInfo().getIp(),getByIdServerName(serverId)), 2);
						return ResultCode.error(String.format("所选的副本玩家已经完成", mainInstanceId));
					}if(result == 3){
						logger.error("所选的副本不存在!请检查策划副本配置表");
						recordOperateLog(String.format(OperateLogInfos.InstanceControllerPerfectInstances,heroId,mainInstanceId,
								getSessionInfo().getIp(),getByIdServerName(serverId)), 2);
						return ResultCode.error(String.format("所选的副本不存在", mainInstanceId));
					}if(result == 4){
						logger.error("等级不足无法跳塔");
						recordOperateLog(String.format(OperateLogInfos.InstanceControllerPerfectInstances,heroId,mainInstanceId,
								getSessionInfo().getIp(),getByIdServerName(serverId)), 2);
						return ResultCode.error(String.format("等级不足无法跳塔", mainInstanceId));
					}if(result == 5){
						logger.error("游戏服此玩家当爬塔数大于历史最高");
						recordOperateLog(String.format(OperateLogInfos.InstanceControllerPerfectInstances,heroId,mainInstanceId,
								getSessionInfo().getIp(),getByIdServerName(serverId)), 2);
						return ResultCode.error(String.format("游戏服此玩家当爬塔数大于历史最高", mainInstanceId));
					}if(result == 6){
						logger.error("根据副本和难度未找到副本");
						recordOperateLog(String.format(OperateLogInfos.InstanceControllerPerfectInstances,heroId,mainInstanceId,
								getSessionInfo().getIp(),getByIdServerName(serverId)), 2);
						return ResultCode.error(String.format("根据副本和难度未找到副本", mainInstanceId));
					}
					recordOperateLog(String.format(OperateLogInfos.InstanceControllerPerfectInstances,heroId,mainInstanceId,
							getSessionInfo().getIp(),getByIdServerName(serverId)), 1);
					return ResultCode.succ("操作成功");
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return ResultCode.error("api出错，操作失败");
	}
	/**
	 * 跳九重天副本
	 * @param pid
	 * @param serverId
	 * @param heroId
	 * @param mainInstanceId
	 * @return
	 */
	public Object perfectNineDay(@Param("serverId") int serverId,
			@Param("heroId") String heroId,@Param("mainInstanceId") int mainInstanceId) {
		if (StringUtil.isEmpty(heroId)) {
			return ResultCode.error("参数错误heroId");
		}
		if( 0 == mainInstanceId ){
			return ResultCode.error("选择爬塔副本为空");
		}
		HessianProxyFactory factory = new HessianProxyFactory();
		factory.setOverloadEnabled(true); 
		{
			String url = buildUrl(serverId, "/game-server/api/service/accounthero");
			try {	
				HeroService heroService = (HeroService) factory.create(HeroService.class, url);
				if (ObjectUtil.isEmptyObject(heroService)) {
					logger.error("不存在的api");
					return ResultCode.error("创建远程为空!");
				} else {
					int result = heroService.perfectNineDay(heroId,mainInstanceId);
					if (result == 1) {
						logger.error(String.format("账号【%s】不存在", heroId));
						recordOperateLog(String.format(OperateLogInfos.InstanceControllerPerfectNineDay,heroId,mainInstanceId,
								getSessionInfo().getIp(),getByIdServerName(serverId)), 2);
						return ResultCode.error(String.format("账号【%s】不存在", heroId));
					}if(result == 2){
						logger.error("所选的玩家副本玩家已经完成");
						recordOperateLog(String.format(OperateLogInfos.InstanceControllerPerfectNineDay,heroId,mainInstanceId,
								getSessionInfo().getIp(),getByIdServerName(serverId)), 2);
						return ResultCode.error(String.format("所选的副本玩家已经完成", mainInstanceId));
					}if(result == 3){
						logger.error("所选的副本不存在!请检查策划副本配置表");
						recordOperateLog(String.format(OperateLogInfos.InstanceControllerPerfectNineDay,heroId,mainInstanceId,
								getSessionInfo().getIp(),getByIdServerName(serverId)), 2);
						return ResultCode.error(String.format("所选的副本不存在", mainInstanceId));
					}if(result == 4){
						logger.error("等级不足无法跳天");
						recordOperateLog(String.format(OperateLogInfos.InstanceControllerPerfectNineDay,heroId,mainInstanceId,
								getSessionInfo().getIp(),getByIdServerName(serverId)), 2);
						return ResultCode.error(String.format("等级不足无法跳塔", mainInstanceId));
					}if(result == 5){
						logger.error("根据副本和难度找不见此副本");
						recordOperateLog(String.format(OperateLogInfos.InstanceControllerPerfectNineDay,heroId,mainInstanceId,
								getSessionInfo().getIp(),getByIdServerName(serverId)), 2);
						return ResultCode.error(String.format("根据副本和难度找不见此副本", mainInstanceId));
					}
					recordOperateLog(String.format(OperateLogInfos.InstanceControllerPerfectNineDay,heroId,mainInstanceId,
							getSessionInfo().getIp(),getByIdServerName(serverId)), 1);
					return ResultCode.succ("操作成功");
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return ResultCode.error("api出错，操作失败");
	}
}
