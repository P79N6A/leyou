package com.game.admin.controllers;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import net.paoding.rose.web.annotation.Param;
import org.python.google.common.collect.Lists;
import org.springframework.beans.factory.annotation.Autowired;
import com.alibaba.fastjson.JSON;
import com.game.admin.dto.task.NowTaskName;
import com.game.admin.dto.task.TaskAllData;
import com.game.admin.dto.task.TaskDto;
import com.game.admin.dto.task.TaskTypeData;
import com.game.admin.pojo.task.TaskConditionData;
import com.game.admin.pojo.task.TaskData;
import com.game.admin.pojo.task.TaskRewardData;
import com.game.admin.service.task.ITaskService;
import com.game.admin.service.task.TaskDataManager;
import com.game.admin.utils.OperateLogInfos;
import com.game.admin.utils.ResultCode;
import com.game.api.hessian.GMTaskService;
import com.game.api.hessian.HeroService;
import com.game.util.CollectionUtil;
import com.game.util.ObjectUtil;
import com.game.util.StringUtil;

/**
 * 任务控制器
 * @author zhangyaping email:yapingzhang_beta@163.com
 *
 */
public class TaskController extends BaseController {

	@Autowired
	private ITaskService taskService;

	/**
	 * 跳转至任务列表页面
	 * goList
	 * @return   
	 * String  
	 * @exception
	 */
	public String goTaskList() {
		return "task/list";
	}

	/**
	 * 刷新内存数据
	 * @return
	 */
	public Object refresh() {
		taskService.initTasks();
		return ResultCode.succ("任务数据刷新成功");
	}

	/**
	 * 跳转至更新缓存界面
	 * @return
	 */
	public String goUpdateCache() {
		return "task/updatecache";
	}
	
	/**
	 * 获取主线任务下拉列表
	 * @param name
	 */
	public Object mainTask(@Param("q") String q) {
		List<TaskTypeData> list = TaskDataManager.getInstance().getAllMainData();
		return ResultCode.writeJson(list);
	}
	
	/**
	 * 获取支线任务下拉列表
	 * @param name
	 */
	public Object zhixian(@Param("q") String q) {
		List<TaskTypeData> list = TaskDataManager.getInstance().getZhiTaskData();
		return ResultCode.writeJson(list);
	}

	/**
	 * 获取日环任务下拉列表
	 * @param name
	 */
	public Object dailyTask(@Param("q") String q) {
		List<TaskTypeData> list = TaskDataManager.getInstance().getDailyTaskData();
		return ResultCode.writeJson(list);
	}
	/**
	 * 获取帮派任务下拉列表
	 * @param name
	 */
	public Object unionTask(@Param("q") String q) {
		List<TaskTypeData> list = TaskDataManager.getInstance().getUnionTaskData();
		return ResultCode.writeJson(list);
	}
	/**
	 * 获取隐藏任务下拉列表
	 * @param name
	 */
	public Object hideTask(@Param("q") String q) {
		List<TaskTypeData> list = TaskDataManager.getInstance().getHideTaskData();
		return ResultCode.writeJson(list);
	}
	/**
	 * 获取其他任务下拉列表
	 * @param name
	 */
	public Object otherTask(@Param("q") String q) {
		List<TaskTypeData> list = TaskDataManager.getInstance().getOtherTaskData();
		return ResultCode.writeJson(list);
	}
	
	/**
	 * 获得任务列表
	 */
	public Object getTaskList(@Param("qTaskType") Integer taskType, @Param("qTaskId") Integer taskId,
			@Param("qTaskName") String taskName, @Param("page") int page, @Param("rows") int rows) {
		if (page < 0)
			page = 1;
		taskType = null == taskType ? -1 : taskType;
		taskId = null == taskId ? 0 : taskId;
		taskName = null == taskName ? "" : "%" + taskName + "%";
		int pagesize = rows == 0 ? 10 : rows;
		int offset = (page - 1) * pagesize;
		return ResultCode.writeJson(taskService.datagrid(taskType, taskId, taskName, offset, pagesize));
	}

	/**
	 * 取所有任务下拉列表
	 * 
	 * @param name
	 * @param excludeId
	 * @param page
	 * @param rows
	 */
	public Object getalltasks(@Param("q") String q, @Param("excludeId") Integer excludeId) {
		
		List<TaskDto> list = taskService.getTaskDtoByname(q, excludeId, 0, 10);
		return ResultCode.writeJson(list);
	}

	/**
	 * 添加任务
	 * @param taskJson
	 * @param conditionJson
	 * @param rewardJson
	 * @return
	 */
	public Object add(@Param("taskJson") String taskJson, @Param("conditionJson") String conditionJson,
			@Param("rewardJson") String rewardJson) {
		try {
			TaskData task = JSON.parseObject(taskJson, TaskData.class);
			if (taskService.existsTaskId(task.getTaskId())) {
				return ResultCode.error(String.format("任务[%d]已存在！", task.getTaskId()));
			}
			List<TaskConditionData> conditions = JSON.parseArray(conditionJson, TaskConditionData.class);
			List<TaskRewardData> rewards = JSON.parseArray(rewardJson, TaskRewardData.class);
			taskService.addTask(task, conditions, rewards);
			
			return ResultCode.succ("添加任务成功!");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ResultCode.error("添加任务失败！");
	}

	/**
	 * 获取任务数据
	 * @param taskId
	 * @return
	 */
	public Object getTask(@Param("taskId") Integer taskId) {
		TaskData data = taskService.getData(taskId);
		return ResultCode.writeJson(data);
	}

	/**
	 * 获取所有任务条件id
	 * @param taskId
	 * @return
	 */
	public Object getTaskConditionIds(@Param("taskId") Integer taskId) {
		List<Integer> ids = taskService.getConditionIds(taskId);
		if (ids == null) {
			return ResultCode.error(String.format("任务[%d]不存在条件配置！", taskId));
		}
		return ResultCode.writeJson(ids);
	}

	/**
	 * 获取任务条件
	 * @param taskId
	 * @return
	 */
	public Object getTaskCondition(@Param("taskId") Integer taskId, @Param("conditionId") Integer conditionId) {
		return ResultCode.writeJson(taskService.getCondition(taskId, conditionId));
	}

	/**
	 * 获取所有任务奖励id
	 * @param taskId
	 * @return
	 */
	public Object getTaskRewardIds(@Param("taskId") Integer taskId) {
		List<Integer> ids = taskService.getRewardId(taskId);
		if (ids == null) {
			return ResultCode.error(String.format("任务[%d]不存在奖励配置！", taskId));
		}
		return ResultCode.writeJson(ids);
	}

	/**
	 * 获取任务奖励
	 * @param taskId
	 * @return
	 */
	public Object getTaskReward(@Param("taskId") Integer taskId, @Param("rewardId") Integer rewardId) {
		return ResultCode.writeJson(taskService.getReward(taskId, rewardId));
	}

	/**
	 * 更新任务
	 * @param taskJson
	 * @param conditionJson
	 * @param rewardJson
	 * @return
	 */
	public Object update(@Param("taskJson") String taskJson, @Param("conditionJson") String conditionJson,
			@Param("rewardJson") String rewardJson) {
		try {
			TaskData task = JSON.parseObject(taskJson, TaskData.class);
			if (!taskService.existsTaskId(task.getTaskId())) {
				return ResultCode.error(String.format("任务[%d]不存在！", task.getTaskId()));
			}
			if (task.getPreTaskId() != null && task.getPreTaskId() > 0 && task.getTaskId().equals(task.getPreTaskId())) {
				return ResultCode.error(String.format("任务[%d]前置任务不能配置成自己！", task.getTaskId()));
			}
			List<TaskConditionData> conditions = JSON.parseArray(conditionJson, TaskConditionData.class);
			List<TaskRewardData> rewards = JSON.parseArray(rewardJson, TaskRewardData.class);
			taskService.updateTask(task, conditions, rewards);
			return ResultCode.succ("更新任务成功!");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ResultCode.error("更新任务失败!");
	}

	/**
	 * 删除任务
	 * @param taskId
	 * @return
	 */
	public Object deleteByTaskId(@Param("taskId") Integer taskId) {
		if (!taskService.existsTaskId(taskId)) {
			return ResultCode.error(String.format("任务[%d]不存在！", taskId));
		}
		taskService.deleteTask(taskId);
		return ResultCode.succ("删除任务成功!");
	}
	
	/**
	 * 取所有任务列表
	 * @param name
	 * @param page
	 * @param rows
	 */
	public Object getMainTaskList(@Param("q") String q,@Param("serverId") int serverId) {
		String url = buildUrl(serverId);
		if(!StringUtil.isEmpty(url)) {
			GMTaskService TaskService  = getHessianFactory(GMTaskService.class, url);
			if(TaskService != null){
				try {
					List<com.game.api.hessian.dto.TaskDto> list=TaskService.getAllMainTasks(q);
					Collections.sort(list, new Comparator<com.game.api.hessian.dto.TaskDto>(){
						@Override
						public int compare(com.game.api.hessian.dto.TaskDto o1, com.game.api.hessian.dto.TaskDto o2) {
							if (o1.getTaskId()<o2.getTaskId()) {
								return -1;
							}else 	if (o1.getTaskId()>o2.getTaskId()){
								return 1;
							}
							return 0;
						}});
					return ResultCode.writeJson(list);
				} catch (Exception e) {
					logger.info(String.format("此服务器拒绝连接/或者没有启动 ,serverId: {%d}",serverId));
				}
			}
		}
		List<TaskDto> list = taskService.getAllMainTasks(q);
		Collections.sort(list, new Comparator<TaskDto>(){
			
			@Override
			public int compare(TaskDto o1, TaskDto o2) {
				if (o1.getTaskId()<o2.getTaskId()) {
					return -1;
				}else 	if (o1.getTaskId()>o2.getTaskId()){
					return 1;
				}
				return 0;
			}});
		return ResultCode.writeJson(list);
	}
	
	
	
	
	
	/**
	 * 完成选择的任务
	 * @param pid
	 * @param serverId
	 * @param heroId
	 * @param mainTaskId
	 * @return
	 */
	public Object perfectTasks(@Param("pid") int pid, @Param("serverId") int serverId,
			@Param("taskheroId") String taskheroId,@Param("taskId") int taskId) {
		if (null == taskheroId || "".equals(taskheroId)||0==taskId) {
			return ResultCode.error("参数错误heroId");
		}
		String url = buildUrl(serverId);
		if(!StringUtil.isEmpty(url)) {
			HeroService heroService = getHessianFactory(HeroService.class, url);
			if(heroService!= null){
				try {
					int result = heroService.perfectTasks(taskheroId,taskId);
					if (result == 1) {
						logger.error(String.format("账号【%s】不存在", taskheroId));
						recordOperateLog(String.format(OperateLogInfos.TaskControllerPerfectTasks,taskheroId,taskId
										,getSessionInfo().getIp(),getByIdServerName(serverId)), 2);
						return ResultCode.error(String.format("账号【%s】不存在", taskheroId));
					}else if (result == 2) {
						logger.error(String.format("参数错误TaskId", taskId));
						recordOperateLog(String.format(OperateLogInfos.TaskControllerPerfectTasks,taskheroId,taskId
								,getSessionInfo().getIp(),getByIdServerName(serverId)), 2);
						return ResultCode.error(String.format("参数错误mainTaskId", taskId));
					}else if (result == 3) {
						logger.error(String.format("此任务已经完成", taskId));
						recordOperateLog(String.format(OperateLogInfos.TaskControllerPerfectTasks,taskheroId,taskId
								,getSessionInfo().getIp(),getByIdServerName(serverId)), 2);
						return ResultCode.error(String.format("此任务已经完成", taskId));
					}else if (result == 4) {
						logger.error(String.format("此任务不存在", taskId));
						recordOperateLog(String.format(OperateLogInfos.TaskControllerPerfectTasks,taskheroId,taskId
								,getSessionInfo().getIp(),getByIdServerName(serverId)), 2);
						return ResultCode.error(String.format("此任务不存在", taskId));
					}else if (result == 5) {
						logger.error(String.format("此玩家目前没有帮派", taskId));
						recordOperateLog(String.format(OperateLogInfos.TaskControllerPerfectTasks,taskheroId,taskId
								,getSessionInfo().getIp(),getByIdServerName(serverId)), 2);
						return ResultCode.error(String.format("此玩家目前没有帮派", taskId));
					}
					recordOperateLog(String.format(OperateLogInfos.TaskControllerPerfectTasks,taskheroId,taskId
							,getSessionInfo().getIp(),getByIdServerName(serverId)), 1);
					return ResultCode.succ("操作成功");
				} catch (Exception e) {
					logger.info(String.format("此服务器拒绝连接/或者没有启动 ,serverId: {%d}",serverId));
				}
			}
		}
		return ResultCode.error("api出错，操作失败");
	}
	
	/**
	 * 获取当前所有正在进行的的任务
	 * @param pid
	 * @param serverId
	 * @param heroId
	 * @return
	 */
	public Object getCurrentAllTask(@Param("pid") int pid,@Param("serverId") int serverId,
			@Param("heroId") String heroId){
		if(StringUtil.isEmpty(heroId)){
			return ResultCode.error("参数错误heroId为null");
		}
		String url = buildUrl(serverId);
		if(!StringUtil.isEmpty(url)) {
			HeroService heroService = getHessianFactory(HeroService.class, url);
			if(heroService != null){
				try {
					List<Integer> taskIdList = heroService.getAllCurrentTask(heroId);
					if(!CollectionUtil.isEmptyCollection(taskIdList)){
						NowTaskName nowTask = getNowTaskNam(taskIdList);
						if(!ObjectUtil.isEmptyObject(nowTask)){
							return  ResultCode.writeJson(nowTask);
						}
					}
					return ResultCode.writeJson(new NowTaskName(null, null, null, null, null, null));
				} catch (Exception e) {
					logger.info(String.format("此服务器拒绝连接/或者没有启动 ,serverId: {%d}",serverId));
				}
			}
		}
		return ResultCode.error("api出错，操作失败");
	}
	
	/**
	 * 获取玩家完成的最后一个任务
	 * @param taskList
	 * @return
	 */
	public NowTaskName getNowTaskNam(List<Integer> taskList){
		String mainTaskName = "",zhiTaskName = "",dailyTaskName = "",unionTaskName = "",hideTaskName = "",otherTaskName = "";
		List<TaskAllData> taskLists = Lists.newArrayList();
		for (Integer nowTaskId : taskList) {
			TaskAllData taskData = getTaskName(nowTaskId);
			if(!ObjectUtil.isEmptyObject(taskData)){
				taskLists.add(taskData);
			}
		}
		if(!CollectionUtil.isEmptyCollection(taskLists)){
			for (TaskAllData taskAllData : taskLists) {
				if(taskAllData.getTaskType() == 1){
					mainTaskName = taskAllData.getTaskName();
				}else if (taskAllData.getTaskType() == 2) {
					zhiTaskName = taskAllData.getTaskName();
				}else if (taskAllData.getTaskType() == 3) {
					dailyTaskName = taskAllData.getTaskName();
				}else if (taskAllData.getTaskType() == 4) {
					unionTaskName = taskAllData.getTaskName();
				}else if (taskAllData.getTaskType() == 7) {
					hideTaskName = taskAllData.getTaskName();
				}else{
					otherTaskName = taskAllData.getTaskName();
				}
			}
		}
		return new NowTaskName(mainTaskName, zhiTaskName, hideTaskName, dailyTaskName, unionTaskName, otherTaskName);
	}
	
	public TaskAllData getTaskName(int nowTaskId){
		List<TaskAllData> allTaskList = TaskDataManager.getInstance().getAllTaskData();
		for (TaskAllData taskAllData : allTaskList) {
			if(taskAllData.getTaskId() == nowTaskId){
				return taskAllData;
			}
		}
		return null;
	}
	
	
	
	
	/**
	 * 获取当前主线任务
	 * @param pid 
	 * @param serverId
	 * @param heroId
	 * @return
	 */
	public Object getCurrentTaskId(@Param("pid") int pid, @Param("serverId") int serverId,
	@Param("heroId") String heroId) {
		if (StringUtil.isEmpty(heroId)) {
			return ResultCode.error("参数错误heroId");
		}
		String url = buildUrl(serverId);
		if(!StringUtil.isEmpty(url)) {
			HeroService heroService = getHessianFactory(HeroService.class, url);
			if(heroService != null){
				try {
					com.game.api.hessian.dto.TaskDto dto= heroService.getTaskId(heroId);
					if(dto==null){
						return ResultCode.error("英雄当前无任务");
					}
					return ResultCode.writeJson(dto);
				} catch (Exception e) {
					logger.info(String.format("此服务器拒绝连接/或者没有启动 ,serverId: {%d}",serverId));
				}
			}
		}
		return ResultCode.error("api出错，操作失败");
	}
	
}
