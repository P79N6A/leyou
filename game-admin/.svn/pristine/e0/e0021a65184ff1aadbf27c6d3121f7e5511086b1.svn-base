package com.game.admin.pojo;

import java.io.Serializable;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;


/**
 *
 * Generated by the rapid-generator.  DO NOT EDIT!!!
 * 
 * @author zhangyaping email:yapingzhang_beta@163.com
 * @version 1.0, 2014年12月10日
 *
 */
public class GemstoneData implements Serializable{
	private static final long serialVersionUID = 5454155825314635342L;
	
	//columns START
    /**
     * 宝石id       db_column: F_id 第1个
     */
	private java.lang.Integer  id;
    /**
     * 宝石名称       db_column: F_name 第2个
     */
	private java.lang.String  name;
    /**
     * 描述       db_column: F_desc 第3个
     */
	private java.lang.String  desc;
    /**
     * 使用等级       db_column: F_grade 第4个
     */
	private java.lang.Integer  grade;
    /**
     * 宝石等级       db_column: F_pinzhi 第5个
     */
	private java.lang.Integer  pinzhi;
    /**
     * 附加类型（1攻击，2护甲，3生命，4能量，5破击，6格挡，7暴击，8暴击伤害）       db_column: F_add_type 第6个
     */
	private java.lang.Integer  addType;
    /**
     * 附加值       db_column: F_add_value 第7个
     */
	private java.lang.Integer  addValue;
    /**
     * 下一级宝石的id (对应t_gemstone id)       db_column: F_next_gems_id 第8个
     */
	private java.lang.Integer  nextGemsId;
    /**
     * 下一级需要的金币数       db_column: F_next_needs_golds 第9个
     */
	private java.lang.Integer  nextNeedsGolds;
    /**
     * 下一级需要当前的宝石数量       db_column: F_next_needs_num 第10个
     */
	private java.lang.Integer  nextNeedsNum;
    /**
     * 下一级宝石的数量       db_column: F_next_gems_num 第11个
     */
	private java.lang.Integer  nextGemsNum;
    /**
     * 升下一级需要的物品id（对应goodmodel id）       db_column: F_need_material 第12个
     */
	private java.lang.Integer  needMaterial;
    /**
     * 升下一级需要的物品数量       db_column: F_need_material_num 第13个
     */
	private java.lang.Integer  needMaterialNum;
    /**
     * 卖出价格       db_column: F_sale_price 第14个
     */
	private java.lang.Integer  salePrice;
    /**
     * 是否记录日志(0不记录,1记录掉出|使用|交易|出售|摧毁日志)       db_column: f_log 第15个
     */
	private java.lang.Boolean  log;
    /**
     * 背包中的ICO图标编号       db_column: F_ico 第16个
     */
	private java.lang.String  ico;
    /**
     * 叠加数量       db_column: F_repeat 第17个
     */
	private java.lang.Integer  repeat;
	//columns END

	public GemstoneData(){
	}

	public GemstoneData(
		java.lang.Integer id
	){
		this.id = id;
	}

	/**
	 * 宝石id db_column: t_gemstone.F_id
	 */	
	public void setId(java.lang.Integer value) {
		this.id = value;
	}
	
	/**
     * 宝石id db_column: t_gemstone.F_id
     */
	public java.lang.Integer getId() {
		return this.id;
	}
	/**
	 * 宝石名称 db_column: t_gemstone.F_name
	 */	
	public void setName(java.lang.String value) {
		this.name = value;
	}
	
	/**
     * 宝石名称 db_column: t_gemstone.F_name
     */
	public java.lang.String getName() {
		return this.name;
	}
	/**
	 * 描述 db_column: t_gemstone.F_desc
	 */	
	public void setDesc(java.lang.String value) {
		this.desc = value;
	}
	
	/**
     * 描述 db_column: t_gemstone.F_desc
     */
	public java.lang.String getDesc() {
		return this.desc;
	}
	/**
	 * 使用等级 db_column: t_gemstone.F_grade
	 */	
	public void setGrade(java.lang.Integer value) {
		this.grade = value;
	}
	
	/**
     * 使用等级 db_column: t_gemstone.F_grade
     */
	public java.lang.Integer getGrade() {
		return this.grade;
	}
	/**
	 * 宝石等级 db_column: t_gemstone.F_pinzhi
	 */	
	public void setPinzhi(java.lang.Integer value) {
		this.pinzhi = value;
	}
	
	/**
     * 宝石等级 db_column: t_gemstone.F_pinzhi
     */
	public java.lang.Integer getPinzhi() {
		return this.pinzhi;
	}
	/**
	 * 附加类型（1攻击，2护甲，3生命，4能量，5破击，6格挡，7暴击，8暴击伤害） db_column: t_gemstone.F_add_type
	 */	
	public void setAddType(java.lang.Integer value) {
		this.addType = value;
	}
	
	/**
     * 附加类型（1攻击，2护甲，3生命，4能量，5破击，6格挡，7暴击，8暴击伤害） db_column: t_gemstone.F_add_type
     */
	public java.lang.Integer getAddType() {
		return this.addType;
	}
	/**
	 * 附加值 db_column: t_gemstone.F_add_value
	 */	
	public void setAddValue(java.lang.Integer value) {
		this.addValue = value;
	}
	
	/**
     * 附加值 db_column: t_gemstone.F_add_value
     */
	public java.lang.Integer getAddValue() {
		return this.addValue;
	}
	/**
	 * 下一级宝石的id (对应t_gemstone id) db_column: t_gemstone.F_next_gems_id
	 */	
	public void setNextGemsId(java.lang.Integer value) {
		this.nextGemsId = value;
	}
	
	/**
     * 下一级宝石的id (对应t_gemstone id) db_column: t_gemstone.F_next_gems_id
     */
	public java.lang.Integer getNextGemsId() {
		return this.nextGemsId;
	}
	/**
	 * 下一级需要的金币数 db_column: t_gemstone.F_next_needs_golds
	 */	
	public void setNextNeedsGolds(java.lang.Integer value) {
		this.nextNeedsGolds = value;
	}
	
	/**
     * 下一级需要的金币数 db_column: t_gemstone.F_next_needs_golds
     */
	public java.lang.Integer getNextNeedsGolds() {
		return this.nextNeedsGolds;
	}
	/**
	 * 下一级需要当前的宝石数量 db_column: t_gemstone.F_next_needs_num
	 */	
	public void setNextNeedsNum(java.lang.Integer value) {
		this.nextNeedsNum = value;
	}
	
	/**
     * 下一级需要当前的宝石数量 db_column: t_gemstone.F_next_needs_num
     */
	public java.lang.Integer getNextNeedsNum() {
		return this.nextNeedsNum;
	}
	/**
	 * 下一级宝石的数量 db_column: t_gemstone.F_next_gems_num
	 */	
	public void setNextGemsNum(java.lang.Integer value) {
		this.nextGemsNum = value;
	}
	
	/**
     * 下一级宝石的数量 db_column: t_gemstone.F_next_gems_num
     */
	public java.lang.Integer getNextGemsNum() {
		return this.nextGemsNum;
	}
	/**
	 * 升下一级需要的物品id（对应goodmodel id） db_column: t_gemstone.F_need_material
	 */	
	public void setNeedMaterial(java.lang.Integer value) {
		this.needMaterial = value;
	}
	
	/**
     * 升下一级需要的物品id（对应goodmodel id） db_column: t_gemstone.F_need_material
     */
	public java.lang.Integer getNeedMaterial() {
		return this.needMaterial;
	}
	/**
	 * 升下一级需要的物品数量 db_column: t_gemstone.F_need_material_num
	 */	
	public void setNeedMaterialNum(java.lang.Integer value) {
		this.needMaterialNum = value;
	}
	
	/**
     * 升下一级需要的物品数量 db_column: t_gemstone.F_need_material_num
     */
	public java.lang.Integer getNeedMaterialNum() {
		return this.needMaterialNum;
	}
	/**
	 * 卖出价格 db_column: t_gemstone.F_sale_price
	 */	
	public void setSalePrice(java.lang.Integer value) {
		this.salePrice = value;
	}
	
	/**
     * 卖出价格 db_column: t_gemstone.F_sale_price
     */
	public java.lang.Integer getSalePrice() {
		return this.salePrice;
	}
	/**
	 * 是否记录日志(0不记录,1记录掉出|使用|交易|出售|摧毁日志) db_column: t_gemstone.f_log
	 */	
	public void setLog(java.lang.Boolean value) {
		this.log = value;
	}
	
	/**
     * 是否记录日志(0不记录,1记录掉出|使用|交易|出售|摧毁日志) db_column: t_gemstone.f_log
     */
	public java.lang.Boolean getLog() {
		return this.log;
	}
	/**
	 * 背包中的ICO图标编号 db_column: t_gemstone.F_ico
	 */	
	public void setIco(java.lang.String value) {
		this.ico = value;
	}
	
	/**
     * 背包中的ICO图标编号 db_column: t_gemstone.F_ico
     */
	public java.lang.String getIco() {
		return this.ico;
	}
	/**
	 * 叠加数量 db_column: t_gemstone.F_repeat
	 */	
	public void setRepeat(java.lang.Integer value) {
		this.repeat = value;
	}
	
	/**
     * 叠加数量 db_column: t_gemstone.F_repeat
     */
	public java.lang.Integer getRepeat() {
		return this.repeat;
	}

	@Override
	public String toString() {
		return ToStringBuilder.reflectionToString(this);
	}
	
	@Override
	public int hashCode() {
		return new HashCodeBuilder().append(getId()).toHashCode();
	}
	
	@Override
	public boolean equals(Object obj) {
		if(obj instanceof GemstoneData == false){ return false;}
		if(this == obj) {return true;}
		GemstoneData other = (GemstoneData)obj;
		return new EqualsBuilder().append(getId(),other.getId()).isEquals();
	}
}

