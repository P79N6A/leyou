package com.game.admin.controllers;

import java.util.List;
import net.paoding.rose.web.annotation.Param;
import org.springframework.beans.factory.annotation.Autowired;
import com.game.admin.pojo.Life;
import com.game.admin.service.life.ILifeService;
import com.game.admin.utils.OperateLogInfos;
import com.game.admin.utils.ResultCode;
import com.game.api.hessian.HeroService;
import com.game.util.StringUtil;

/**
 * 命格物品
 * @author jiayi
 *
 */
public class LifeController extends BaseController{
	
	@Autowired
	private ILifeService lifeService;	
	
	public Object getAllLifeData(@Param("q") String q){
		List<Life> lifeDatas = lifeService.getAllLife();
		return ResultCode.writeJson(lifeDatas);
	}
	
	public Object sendLifeGoods(@Param("serverId") int serverId,@Param("heroId") String heroId
								,@Param("lifeGood") String lifeGood,@Param("lifeChipnum") int lifeChipnum){
		String url = buildUrl(serverId);
		if(!StringUtil.isEmpty(url)) {
			HeroService heroService  = getHessianFactory(HeroService.class, url);
			if(heroService!= null){
				try {
					int result = heroService.sendLifeGoods(heroId,lifeGood,lifeChipnum);
					if(result == 1){
						logger.error(String.format("发送命格物品失败，玩家【%s】不存在", heroId));
						recordOperateLog(String.format(OperateLogInfos.LifeControllerSendLifeGoods,heroId,lifeGood,lifeChipnum
								,getSessionInfo().getIp(),getByIdServerName(serverId)), 2);
						return ResultCode.error(String.format("发送命格物品失败,玩家【%s】不存在", heroId));
					} else if (result == 2) {
						return ResultCode.error(String.format("发送命格物品失败,命格未解锁", heroId));
					}
					recordOperateLog(String.format(OperateLogInfos.LifeControllerSendLifeGoods,heroId,lifeGood,lifeChipnum
							,getSessionInfo().getIp(),getByIdServerName(serverId)), 1);
					return ResultCode.succ("发送命格物品成功");
				} catch (Exception e) {
					logger.info(String.format("此服务器拒绝连接/或者没有启动 ,serverId: {%d}",serverId));
				}
			}
		}
		return ResultCode.error("发送失败");
	}
}
