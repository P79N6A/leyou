package com.game.admin.pojo;

import java.io.Serializable;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;


/**
 *
 * Generated by the rapid-generator.  DO NOT EDIT!!!
 * 
 * @author zhangyaping email:yapingzhang_beta@163.com
 * @version 1.0, 2014年12月10日
 *
 */
public class EquipmentData implements Serializable{
	private static final long serialVersionUID = 5454155825314635342L;
	
	//columns START
    /**
     * 装备id       db_column: F_id 第1个
     */
	private java.lang.Integer  id;
    /**
     * 佩戴位置1.武器2.衣服3.裤子4.项链5.护腰6.护靴       db_column: F_position 第2个
     */
	private java.lang.Integer  position;
    /**
     * 使用等级       db_column: F_grade 第3个
     */
	private java.lang.Integer  grade;
    /**
     * 装备名称       db_column: F_name 第4个
     */
	private java.lang.String  name;
    /**
     * 装备描述       db_column: F_desc 第5个
     */
	private java.lang.String  desc;
    /**
     * 职业需求0通用，1拳套，2火枪，3法师；       db_column: F_job 第6个
     */
	private java.lang.Integer  job;
    /**
     * 基础物理攻击       db_column: f_base_wattack 第7个
     */
	private java.lang.Integer  baseWattack;
    /**
     * 基础物理防御       db_column: f_base_wdefence 第8个
     */
	private java.lang.Integer  baseWdefence;
    /**
     * 基础法术攻击       db_column: f_base_fattack 第9个
     */
	private java.lang.Integer  baseFattack;
    /**
     * 基础法术防御       db_column: f_base_fdefence 第10个
     */
	private java.lang.Integer  baseFdefence;
    /**
     * 基础格挡       db_column: f_base_block 第11个
     */
	private java.lang.Integer  baseBlock;
    /**
     * 基础暴击率（1/10000）       db_column: f_base_crt 第12个
     */
	private java.lang.Integer  baseCrt;
    /**
     * 基础破击       db_column: f_base_blow 第13个
     */
	private java.lang.Integer  baseBlow;
    /**
     * 基础生命上限       db_column: f_base_hp 第14个
     */
	private java.lang.Integer  baseHp;
    /**
     * 基础法力上限       db_column: f_base_mp 第15个
     */
	private java.lang.Integer  baseMp;
    /**
     * 基础暴击伤害       db_column: f_base_damage 第16个
     */
	private java.lang.Integer  baseDamage;
    /**
     * 套装类型如：0非套装，1.神话       db_column: f_taoz_type 第17个
     */
	private java.lang.Integer  taozType;
    /**
     * 小图标       db_column: F_ico 第18个
     */
	private java.lang.String  ico;
    /**
     * 大图标       db_column: F_big_ico 第19个
     */
	private java.lang.String  bigIco;
    /**
     * 物品是否允许出售（0不允许，1允许）       db_column: F_is_sale 第20个
     */
	private Integer  isSale;
    /**
     * 卖出价格       db_column: f_sale_price 第21个
     */
	private java.lang.Integer  salePrice;
    /**
     * 装备售卖金币公式       db_column: f_sale_golds 第22个
     */
	private java.lang.String  saleGolds;
    /**
     * 装备显示战斗力公式       db_column: f_fightpower 第23个
     */
	private java.lang.String  fightpower;
    /**
     * 是否记录日志(0不记录,1记录掉出|使用|交易|出售|摧毁日志)       db_column: f_log 第24个
     */
	private java.lang.Boolean  log;
    /**
     * 可镶嵌宝石类型（1攻击，2防御，3生命，4能量，5破击，6格挡，7暴击，8暴击伤害）多个用，隔开       db_column: F_gemstone_type 第25个
     */
	private java.lang.String  gemstoneType;
	//columns END

	public EquipmentData(){
	}

	public EquipmentData(
		java.lang.Integer id
	){
		this.id = id;
	}

	/**
	 * 装备id db_column: t_equipment.F_id
	 */	
	public void setId(java.lang.Integer value) {
		this.id = value;
	}
	
	/**
     * 装备id db_column: t_equipment.F_id
     */
	public java.lang.Integer getId() {
		return this.id;
	}
	/**
	 * 佩戴位置1.武器2.衣服3.裤子4.项链5.护腰6.护靴 db_column: t_equipment.F_position
	 */	
	public void setPosition(java.lang.Integer value) {
		this.position = value;
	}
	
	/**
     * 佩戴位置1.武器2.衣服3.裤子4.项链5.护腰6.护靴 db_column: t_equipment.F_position
     */
	public java.lang.Integer getPosition() {
		return this.position;
	}
	/**
	 * 使用等级 db_column: t_equipment.F_grade
	 */	
	public void setGrade(java.lang.Integer value) {
		this.grade = value;
	}
	
	/**
     * 使用等级 db_column: t_equipment.F_grade
     */
	public java.lang.Integer getGrade() {
		return this.grade;
	}
	/**
	 * 装备名称 db_column: t_equipment.F_name
	 */	
	public void setName(java.lang.String value) {
		this.name = value;
	}
	
	/**
     * 装备名称 db_column: t_equipment.F_name
     */
	public java.lang.String getName() {
		return this.name;
	}
	/**
	 * 装备描述 db_column: t_equipment.F_desc
	 */	
	public void setDesc(java.lang.String value) {
		this.desc = value;
	}
	
	/**
     * 装备描述 db_column: t_equipment.F_desc
     */
	public java.lang.String getDesc() {
		return this.desc;
	}
	/**
	 * 职业需求0通用，1拳套，2火枪，3法师； db_column: t_equipment.F_job
	 */	
	public void setJob(java.lang.Integer value) {
		this.job = value;
	}
	
	/**
     * 职业需求0通用，1拳套，2火枪，3法师； db_column: t_equipment.F_job
     */
	public java.lang.Integer getJob() {
		return this.job;
	}
	/**
	 * 基础物理攻击 db_column: t_equipment.f_base_wattack
	 */	
	public void setBaseWattack(java.lang.Integer value) {
		this.baseWattack = value;
	}
	
	/**
     * 基础物理攻击 db_column: t_equipment.f_base_wattack
     */
	public java.lang.Integer getBaseWattack() {
		return this.baseWattack;
	}
	/**
	 * 基础物理防御 db_column: t_equipment.f_base_wdefence
	 */	
	public void setBaseWdefence(java.lang.Integer value) {
		this.baseWdefence = value;
	}
	
	/**
     * 基础物理防御 db_column: t_equipment.f_base_wdefence
     */
	public java.lang.Integer getBaseWdefence() {
		return this.baseWdefence;
	}
	/**
	 * 基础法术攻击 db_column: t_equipment.f_base_fattack
	 */	
	public void setBaseFattack(java.lang.Integer value) {
		this.baseFattack = value;
	}
	
	/**
     * 基础法术攻击 db_column: t_equipment.f_base_fattack
     */
	public java.lang.Integer getBaseFattack() {
		return this.baseFattack;
	}
	/**
	 * 基础法术防御 db_column: t_equipment.f_base_fdefence
	 */	
	public void setBaseFdefence(java.lang.Integer value) {
		this.baseFdefence = value;
	}
	
	/**
     * 基础法术防御 db_column: t_equipment.f_base_fdefence
     */
	public java.lang.Integer getBaseFdefence() {
		return this.baseFdefence;
	}
	/**
	 * 基础格挡 db_column: t_equipment.f_base_block
	 */	
	public void setBaseBlock(java.lang.Integer value) {
		this.baseBlock = value;
	}
	
	/**
     * 基础格挡 db_column: t_equipment.f_base_block
     */
	public java.lang.Integer getBaseBlock() {
		return this.baseBlock;
	}
	/**
	 * 基础暴击率（1/10000） db_column: t_equipment.f_base_crt
	 */	
	public void setBaseCrt(java.lang.Integer value) {
		this.baseCrt = value;
	}
	
	/**
     * 基础暴击率（1/10000） db_column: t_equipment.f_base_crt
     */
	public java.lang.Integer getBaseCrt() {
		return this.baseCrt;
	}
	/**
	 * 基础破击 db_column: t_equipment.f_base_blow
	 */	
	public void setBaseBlow(java.lang.Integer value) {
		this.baseBlow = value;
	}
	
	/**
     * 基础破击 db_column: t_equipment.f_base_blow
     */
	public java.lang.Integer getBaseBlow() {
		return this.baseBlow;
	}
	/**
	 * 基础生命上限 db_column: t_equipment.f_base_hp
	 */	
	public void setBaseHp(java.lang.Integer value) {
		this.baseHp = value;
	}
	
	/**
     * 基础生命上限 db_column: t_equipment.f_base_hp
     */
	public java.lang.Integer getBaseHp() {
		return this.baseHp;
	}
	/**
	 * 基础法力上限 db_column: t_equipment.f_base_mp
	 */	
	public void setBaseMp(java.lang.Integer value) {
		this.baseMp = value;
	}
	
	/**
     * 基础法力上限 db_column: t_equipment.f_base_mp
     */
	public java.lang.Integer getBaseMp() {
		return this.baseMp;
	}
	/**
	 * 基础暴击伤害 db_column: t_equipment.f_base_damage
	 */	
	public void setBaseDamage(java.lang.Integer value) {
		this.baseDamage = value;
	}
	
	/**
     * 基础暴击伤害 db_column: t_equipment.f_base_damage
     */
	public java.lang.Integer getBaseDamage() {
		return this.baseDamage;
	}
	/**
	 * 套装类型如：0非套装，1.神话 db_column: t_equipment.f_taoz_type
	 */	
	public void setTaozType(java.lang.Integer value) {
		this.taozType = value;
	}
	
	/**
     * 套装类型如：0非套装，1.神话 db_column: t_equipment.f_taoz_type
     */
	public java.lang.Integer getTaozType() {
		return this.taozType;
	}
	/**
	 * 小图标 db_column: t_equipment.F_ico
	 */	
	public void setIco(java.lang.String value) {
		this.ico = value;
	}
	
	/**
     * 小图标 db_column: t_equipment.F_ico
     */
	public java.lang.String getIco() {
		return this.ico;
	}
	/**
	 * 大图标 db_column: t_equipment.F_big_ico
	 */	
	public void setBigIco(java.lang.String value) {
		this.bigIco = value;
	}
	
	/**
     * 大图标 db_column: t_equipment.F_big_ico
     */
	public java.lang.String getBigIco() {
		return this.bigIco;
	}
	/**
	 * 物品是否允许出售（0不允许，1允许） db_column: t_equipment.F_is_sale
	 */	
	public void setIsSale(Integer value) {
		this.isSale = value;
	}
	
	/**
     * 物品是否允许出售（0不允许，1允许） db_column: t_equipment.F_is_sale
     */
	public Integer getIsSale() {
		return this.isSale;
	}
	/**
	 * 卖出价格 db_column: t_equipment.f_sale_price
	 */	
	public void setSalePrice(java.lang.Integer value) {
		this.salePrice = value;
	}
	
	/**
     * 卖出价格 db_column: t_equipment.f_sale_price
     */
	public java.lang.Integer getSalePrice() {
		return this.salePrice;
	}
	/**
	 * 装备售卖金币公式 db_column: t_equipment.f_sale_golds
	 */	
	public void setSaleGolds(java.lang.String value) {
		this.saleGolds = value;
	}
	
	/**
     * 装备售卖金币公式 db_column: t_equipment.f_sale_golds
     */
	public java.lang.String getSaleGolds() {
		return this.saleGolds;
	}
	/**
	 * 装备显示战斗力公式 db_column: t_equipment.f_fightpower
	 */	
	public void setFightpower(java.lang.String value) {
		this.fightpower = value;
	}
	
	/**
     * 装备显示战斗力公式 db_column: t_equipment.f_fightpower
     */
	public java.lang.String getFightpower() {
		return this.fightpower;
	}
	/**
	 * 是否记录日志(0不记录,1记录掉出|使用|交易|出售|摧毁日志) db_column: t_equipment.f_log
	 */	
	public void setLog(java.lang.Boolean value) {
		this.log = value;
	}
	
	/**
     * 是否记录日志(0不记录,1记录掉出|使用|交易|出售|摧毁日志) db_column: t_equipment.f_log
     */
	public java.lang.Boolean getLog() {
		return this.log;
	}
	/**
	 * 可镶嵌宝石类型（1攻击，2防御，3生命，4能量，5破击，6格挡，7暴击，8暴击伤害）多个用，隔开 db_column: t_equipment.F_gemstone_type
	 */	
	public void setGemstoneType(java.lang.String value) {
		this.gemstoneType = value;
	}
	
	/**
     * 可镶嵌宝石类型（1攻击，2防御，3生命，4能量，5破击，6格挡，7暴击，8暴击伤害）多个用，隔开 db_column: t_equipment.F_gemstone_type
     */
	public java.lang.String getGemstoneType() {
		return this.gemstoneType;
	}

	@Override
	public String toString() {
		return ToStringBuilder.reflectionToString(this);
	}
	
	@Override
	public int hashCode() {
		return new HashCodeBuilder().append(getId()).toHashCode();
	}
	
	@Override
	public boolean equals(Object obj) {
		if(obj instanceof EquipmentData == false){ return false;}
		if(this == obj) {return true;}
		EquipmentData other = (EquipmentData)obj;
		return new EqualsBuilder().append(getId(),other.getId()).isEquals();
	}
}

