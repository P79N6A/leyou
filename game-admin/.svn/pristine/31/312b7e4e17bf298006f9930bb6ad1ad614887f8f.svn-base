package com.game.admin.service.task;

import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import javax.annotation.Resource;

import org.python.google.common.collect.Lists;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.stereotype.Component;

import com.game.admin.dao.data.TaskDao;
import com.game.admin.dto.task.TaskAllData;
import com.game.admin.dto.task.TaskTypeData;
import com.game.admin.pojo.system.OperateLogData;
import com.game.admin.utils.ApplicationContextHolderGm;
import com.game.util.CollectionUtil;

/**
 * 静态任务管理器
 * @author jiayi
 *
 */
@Component
public class TaskDataManager implements InitializingBean{
	

	/** 所有的类型的任务*/
	private List<TaskAllData>  allTaskDataLists = Lists.newArrayList();
	
	/** 所有主线任务*/
	private List<TaskTypeData> mainTaskList = Lists.newArrayList();
	/** 所有支线任务*/
	private List<TaskTypeData> zhiTaskList = Lists.newArrayList();
	/** 所有日常任务*/
	private List<TaskTypeData> dailyTaskList = Lists.newArrayList();
	/** 所有帮派任务*/
	private List<TaskTypeData> unionTaskList = Lists.newArrayList();
	/** 所有隐藏任务*/
	private List<TaskTypeData> hideTaskList = Lists.newArrayList();
	/** 所有其他任务*/
	private List<TaskTypeData> otherTaskList = Lists.newArrayList();
	
	
	@Resource
	private TaskDao taskDao;

	@Override
	public void afterPropertiesSet() throws Exception {
		initTaskByType();
	}
	
	public final static TaskDataManager getInstance(){
		return ApplicationContextHolderGm.getBean(TaskDataManager.class);
	}
	
	
	
	public void initTaskByType(){
		allTaskDataLists.clear();
		mainTaskList.clear();
		zhiTaskList.clear();
		dailyTaskList.clear();
		unionTaskList.clear();
		otherTaskList.clear();
		hideTaskList.clear();
		this.allTaskDataLists = taskDao.getAllTask();
		if(!CollectionUtil.isEmptyCollection(allTaskDataLists)){
			for (TaskAllData taskAllData : allTaskDataLists) {
				if(taskAllData.getTaskType() == 1){
					mainTaskList.add(TaskTypeData.valueOf(taskAllData));
				}else if (taskAllData.getTaskType() == 2) {
					zhiTaskList.add(TaskTypeData.valueOf(taskAllData));
				}else if (taskAllData.getTaskType() == 3) {
					dailyTaskList.add(TaskTypeData.valueOf(taskAllData));
				}else if (taskAllData.getTaskType() == 4) {
					unionTaskList.add(TaskTypeData.valueOf(taskAllData));
				}else if (taskAllData.getTaskType() == 7) {
					hideTaskList.add(TaskTypeData.valueOf(taskAllData));
				}else{
					otherTaskList.add(TaskTypeData.valueOf(taskAllData));
				}
			}
		}
	}
	
	/**
	 * 获取所有的任务
	 * @return
	 */
	public List<TaskAllData> getAllTaskData() {
		return allTaskDataLists;
	}
	
	/**
	 * 获取所有的主线的任务
	 * @return
	 */
	public List<TaskTypeData> getAllMainData() {
		Collections.sort(mainTaskList, taskComparator);
		return mainTaskList;
	}
	
	/**
	 * 获取所有支线的任务
	 * @return
	 */
	public List<TaskTypeData> getZhiTaskData() {
		Collections.sort(zhiTaskList, taskComparator);
		return zhiTaskList;
	}
	
	/**
	 * 获取所有的日环任务
	 * @return
	 */
	public List<TaskTypeData> getDailyTaskData() {
		Collections.sort(dailyTaskList, taskComparator);
		return dailyTaskList;
	}
	/**
	 * 获取所有的隐藏任务
	 * @return
	 */
	public List<TaskTypeData> getHideTaskData() {
		Collections.sort(hideTaskList, taskComparator);
		return hideTaskList;
	}
	
	/**
	 * 获取所有的其他任务
	 * @return
	 */
	public List<TaskTypeData> getOtherTaskData() {
		Collections.sort(otherTaskList, taskComparator);
		return otherTaskList;
	}
	
	/**
	 * 获取所有的帮派任务
	 * @return
	 */
	public List<TaskTypeData> getUnionTaskData() {
		Collections.sort(unionTaskList, taskComparator);
		return unionTaskList;
	}
	
	
	public void destroy(){
		allTaskDataLists.clear();
		mainTaskList.clear();
		zhiTaskList.clear();
		dailyTaskList.clear();
		unionTaskList.clear();
		otherTaskList.clear();
		hideTaskList.clear();
	}
	/**
	 * 任务排序
	 */
	private static final Comparator<TaskTypeData> taskComparator = new Comparator<TaskTypeData>(){
		@Override
		public int compare(TaskTypeData o1, TaskTypeData o2) {
			if (o1.getTaskId()<o2.getTaskId()) {
				return -1;
			} else if (o1.getTaskId()>o2.getTaskId()) {
				return 1;
			} 
			return 0;
		}
	};
}
