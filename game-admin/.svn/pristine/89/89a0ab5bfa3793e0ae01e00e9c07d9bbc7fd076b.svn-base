package com.xg.admin.pojo.task;

import java.io.Serializable;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 *
 * Generated by the rapid-generator.  DO NOT EDIT!!!
 * 
 * @author zhangyaping email:yapingzhang_beta@163.com
 * @version 1.0, 2014年12月10日
 *
 */
public class TaskData implements Serializable {
	private static final long serialVersionUID = 5454155825314635342L;
	
	//columns START
    /**
     * 主键id(自增长)       db_column: f_id 第1个
     */
	private java.lang.Integer  id;
    /**
     * 任务id(任务的唯一标识)       db_column: F_task_id 第2个
     */
	private java.lang.Integer  taskId;
    /**
     * 任务名称       db_column: F_task_name 第3个
     */
	private java.lang.String  taskName;
    /**
     * 任务类型（0主线任务；1日常任务；2公会任务；3其他任务）       db_column: F_type 第4个
     */
	private Integer  type;
    /**
     * 任务分组(针对主线任务的分组,0默认1新手引导2精英副本3挑战副本)       db_column: F_group_type 第5个
     */
	private Integer  groupType;
    /**
     * 前置任务id       db_column: f_pre_task_id 第6个
     */
	private java.lang.Integer  preTaskId;
    /**
     * 是否可放弃（1可放弃；0不可放弃）       db_column: F_is_cancel 第7个
     */
	private java.lang.Integer  isCancel;
    /**
     * 是否可重复接（1不可重复；2可重复）       db_column: f_is_repeat 第8个
     */
	private java.lang.Integer  isRepeat;
    /**
     * 每日任务可做次数       db_column: f_daily_count 第9个
     */
	private java.lang.Integer  dailyCount;
    /**
     * 起始NPC。接受任务NPC id限制       db_column: F_begin_npc 第10个
     */
	private java.lang.Integer  beginNpc;
    /**
     * 结束NPC。完成任务NPC id       db_column: F_end_npc 第11个
     */
	private java.lang.Integer  endNpc;
    /**
     * 道具触发任务(道具id)       db_column: f_trigger_goods 第12个
     */
	private java.lang.Integer  triggerGoods;
    /**
     * 单个任务时间限制以分钟为单位 -1为没有时间限制       db_column: f_limit_time 第13个
     */
	private Integer  limitTime;
    /**
     * 一键完成消耗钻石数量（元宝）       db_column: F_one_key_finish_consume_yuanbao 第14个
     */
	private java.lang.Integer  oneKeyFinishConsumeYuanbao;
    /**
     * 接任务开始时间       db_column: f_accept_begin_time 第15个
     */
	private java.util.Date  acceptBeginTime;
    /**
     * 交任务结束时间       db_column: f_complete_end_time 第16个
     */
	private java.util.Date  completeEndTime;
    /**
     * 任务描述       db_column: F_task_desc 第17个
     */
	private java.lang.String  taskDesc;
    /**
     * 玩家等级区间min       db_column: f_min_grade 第18个
     */
	private java.lang.Integer  minGrade;
    /**
     * 玩家等级区间MAX       db_column: f_max_grade 第19个
     */
	private java.lang.Integer  maxGrade;
    /**
     * 是否系统人为删除（0不删除1删除）       db_column: f_is_sys_del 第20个
     */
	private java.lang.Boolean  isSysDel;
	//columns END

	public TaskData(){
	}

	public TaskData(
		java.lang.Integer id
	){
		this.id = id;
	}

	/**
	 * 主键id(自增长) db_column: t_task.f_id
	 */	
	public void setId(java.lang.Integer value) {
		this.id = value;
	}
	
	/**
     * 主键id(自增长) db_column: t_task.f_id
     */
	public java.lang.Integer getId() {
		return this.id;
	}
	/**
	 * 任务id(任务的唯一标识) db_column: t_task.F_task_id
	 */	
	public void setTaskId(java.lang.Integer value) {
		this.taskId = value;
	}
	
	/**
     * 任务id(任务的唯一标识) db_column: t_task.F_task_id
     */
	public java.lang.Integer getTaskId() {
		return this.taskId;
	}
	/**
	 * 任务名称 db_column: t_task.F_task_name
	 */	
	public void setTaskName(java.lang.String value) {
		this.taskName = value;
	}
	
	/**
     * 任务名称 db_column: t_task.F_task_name
     */
	public java.lang.String getTaskName() {
		return this.taskName;
	}
	/**
	 * 任务类型（0主线任务；1日常任务；2公会任务；3其他任务） db_column: t_task.F_type
	 */	
	public void setType(Integer value) {
		this.type = value;
	}
	
	/**
     * 任务类型（0主线任务；1日常任务；2公会任务；3其他任务） db_column: t_task.F_type
     */
	public Integer getType() {
		return this.type;
	}
	/**
	 * 任务分组(针对主线任务的分组,0默认1新手引导2精英副本3挑战副本) db_column: t_task.F_group_type
	 */	
	public void setGroupType(Integer value) {
		this.groupType = value;
	}
	
	/**
     * 任务分组(针对主线任务的分组,0默认1新手引导2精英副本3挑战副本) db_column: t_task.F_group_type
     */
	public Integer getGroupType() {
		return this.groupType;
	}
	/**
	 * 前置任务id db_column: t_task.f_pre_task_id
	 */	
	public void setPreTaskId(java.lang.Integer value) {
		this.preTaskId = value;
	}
	
	/**
     * 前置任务id db_column: t_task.f_pre_task_id
     */
	public java.lang.Integer getPreTaskId() {
		return this.preTaskId;
	}
	/**
	 * 是否可放弃（1可放弃；0不可放弃） db_column: t_task.F_is_cancel
	 */	
	public void setIsCancel(java.lang.Integer value) {
		this.isCancel = value;
	}
	
	/**
     * 是否可放弃（1可放弃；0不可放弃） db_column: t_task.F_is_cancel
     */
	public java.lang.Integer getIsCancel() {
		return this.isCancel;
	}
	/**
	 * 是否可重复接（1不可重复；2可重复） db_column: t_task.f_is_repeat
	 */	
	public void setIsRepeat(java.lang.Integer value) {
		this.isRepeat = value;
	}
	
	/**
     * 是否可重复接（1不可重复；2可重复） db_column: t_task.f_is_repeat
     */
	public java.lang.Integer getIsRepeat() {
		return this.isRepeat;
	}
	/**
	 * 每日任务可做次数 db_column: t_task.f_daily_count
	 */	
	public void setDailyCount(java.lang.Integer value) {
		this.dailyCount = value;
	}
	
	/**
     * 每日任务可做次数 db_column: t_task.f_daily_count
     */
	public java.lang.Integer getDailyCount() {
		return this.dailyCount;
	}
	/**
	 * 起始NPC。接受任务NPC id限制 db_column: t_task.F_begin_npc
	 */	
	public void setBeginNpc(java.lang.Integer value) {
		this.beginNpc = value;
	}
	
	/**
     * 起始NPC。接受任务NPC id限制 db_column: t_task.F_begin_npc
     */
	public java.lang.Integer getBeginNpc() {
		return this.beginNpc;
	}
	/**
	 * 结束NPC。完成任务NPC id db_column: t_task.F_end_npc
	 */	
	public void setEndNpc(java.lang.Integer value) {
		this.endNpc = value;
	}
	
	/**
     * 结束NPC。完成任务NPC id db_column: t_task.F_end_npc
     */
	public java.lang.Integer getEndNpc() {
		return this.endNpc;
	}
	/**
	 * 道具触发任务(道具id) db_column: t_task.f_trigger_goods
	 */	
	public void setTriggerGoods(java.lang.Integer value) {
		this.triggerGoods = value;
	}
	
	/**
     * 道具触发任务(道具id) db_column: t_task.f_trigger_goods
     */
	public java.lang.Integer getTriggerGoods() {
		return this.triggerGoods;
	}
	/**
	 * 单个任务时间限制以分钟为单位 -1为没有时间限制 db_column: t_task.f_limit_time
	 */	
	public void setLimitTime(Integer value) {
		this.limitTime = value;
	}
	
	/**
     * 单个任务时间限制以分钟为单位 -1为没有时间限制 db_column: t_task.f_limit_time
     */
	public Integer getLimitTime() {
		return this.limitTime;
	}
	/**
	 * 一键完成消耗钻石数量（元宝） db_column: t_task.F_one_key_finish_consume_yuanbao
	 */	
	public void setOneKeyFinishConsumeYuanbao(java.lang.Integer value) {
		this.oneKeyFinishConsumeYuanbao = value;
	}
	
	/**
     * 一键完成消耗钻石数量（元宝） db_column: t_task.F_one_key_finish_consume_yuanbao
     */
	public java.lang.Integer getOneKeyFinishConsumeYuanbao() {
		return this.oneKeyFinishConsumeYuanbao;
	}
	/**
	 * 接任务开始时间 db_column: t_task.f_accept_begin_time
	 */	
	public void setAcceptBeginTime(java.util.Date value) {
		this.acceptBeginTime = value;
	}
	
	/**
     * 接任务开始时间 db_column: t_task.f_accept_begin_time
     */
	public java.util.Date getAcceptBeginTime() {
		return this.acceptBeginTime;
	}
	/**
	 * 交任务结束时间 db_column: t_task.f_complete_end_time
	 */	
	public void setCompleteEndTime(java.util.Date value) {
		this.completeEndTime = value;
	}
	
	/**
     * 交任务结束时间 db_column: t_task.f_complete_end_time
     */
	public java.util.Date getCompleteEndTime() {
		return this.completeEndTime;
	}
	/**
	 * 任务描述 db_column: t_task.F_task_desc
	 */	
	public void setTaskDesc(java.lang.String value) {
		this.taskDesc = value;
	}
	
	/**
     * 任务描述 db_column: t_task.F_task_desc
     */
	public java.lang.String getTaskDesc() {
		return this.taskDesc;
	}
	/**
	 * 玩家等级区间min db_column: t_task.f_min_grade
	 */	
	public void setMinGrade(java.lang.Integer value) {
		this.minGrade = value;
	}
	
	/**
     * 玩家等级区间min db_column: t_task.f_min_grade
     */
	public java.lang.Integer getMinGrade() {
		return this.minGrade;
	}
	/**
	 * 玩家等级区间MAX db_column: t_task.f_max_grade
	 */	
	public void setMaxGrade(java.lang.Integer value) {
		this.maxGrade = value;
	}
	
	/**
     * 玩家等级区间MAX db_column: t_task.f_max_grade
     */
	public java.lang.Integer getMaxGrade() {
		return this.maxGrade;
	}
	/**
	 * 是否系统人为删除（0不删除1删除） db_column: t_task.f_is_sys_del
	 */	
	public void setIsSysDel(java.lang.Boolean value) {
		this.isSysDel = value;
	}
	
	/**
     * 是否系统人为删除（0不删除1删除） db_column: t_task.f_is_sys_del
     */
	public java.lang.Boolean getIsSysDel() {
		return this.isSysDel;
	}

	@Override
	public String toString() {
		return ToStringBuilder.reflectionToString(this);
	}
	
	@Override
	public int hashCode() {
		return new HashCodeBuilder().append(getId()).toHashCode();
	}
	
	@Override
	public boolean equals(Object obj) {
		if(obj instanceof TaskData == false){ return false;}
		if(this == obj) {return true;}
		TaskData other = (TaskData)obj;
		return new EqualsBuilder().append(getId(),other.getId()).isEquals();
	}
}
