package com.xg.admin.pojo;

import java.io.Serializable;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;


/**
 *
 * Generated by the rapid-generator.  DO NOT EDIT!!!
 * 
 * @author zhangyaping email:yapingzhang_beta@163.com
 * @version 1.0, 2014年12月10日
 *
 */
public class MonsterModelData  implements Serializable{
	private static final long serialVersionUID = 5454155825314635342L;
	
	//columns START
    /**
     * id       db_column: F_id 第1个
     */
	private java.lang.Integer  id;
    /**
     * 怪物名称       db_column: F_name 第2个
     */
	private java.lang.String  name;
    /**
     * 怪物描述       db_column: F_desc 第3个
     */
	private java.lang.String  desc;
    /**
     * 怪物类型,普通1，精英2，boss3       db_column: F_type 第4个
     */
	private Integer  type;
    /**
     * 头像图标ID       db_column: F_head_icon_id 第5个
     */
	private java.lang.Integer  headIconId;
    /**
     * 怪物换装资源ID       db_column: F_avatar_id 第6个
     */
	private java.lang.Integer  avatarId;
    /**
     * 攻击时声音编号       db_column: F_attack_audio 第7个
     */
	private java.lang.Integer  attackAudio;
    /**
     * 被攻击的声音       db_column: F_hurt_audio 第8个
     */
	private java.lang.Integer  hurtAudio;
    /**
     * 死亡时的声音编号       db_column: F_die_audio 第9个
     */
	private java.lang.Integer  dieAudio;
    /**
     * 等级       db_column: F_grade 第10个
     */
	private Integer  grade;
    /**
     * 生命值       db_column: F_hp 第11个
     */
	private java.lang.Integer  hp;
    /**
     * 法术攻击       db_column: F_fattack 第12个
     */
	private java.lang.Integer  fattack;
    /**
     * 物理攻击       db_column: F_wattack 第13个
     */
	private java.lang.Integer  wattack;
    /**
     * 法术防御       db_column: F_fdefence 第14个
     */
	private java.lang.Integer  fdefence;
    /**
     * 物理防御       db_column: F_wdefence 第15个
     */
	private java.lang.Integer  wdefence;
    /**
     * 破击       db_column: F_blow 第16个
     */
	private java.lang.Integer  blow;
    /**
     * 暴击       db_column: F_crt 第17个
     */
	private java.lang.Integer  crt;
    /**
     * 格挡       db_column: F_block 第18个
     */
	private java.lang.Integer  block;
    /**
     * 能量       db_column: F_mp 第19个
     */
	private java.lang.Integer  mp;
    /**
     * 暴击伤害       db_column: F_damage 第20个
     */
	private java.lang.Integer  damage;
    /**
     * 变身变态倍数       db_column: F_abnormal 第21个
     */
	private Integer  abnormal;
    /**
     * 攻击设定，主动攻击1/被动攻击2       db_column: F_is 第22个
     */
	private Integer  is;
    /**
     * 警戒范围(以怪物 当前点 为中心点) 主动攻击怪和角色间距离进入警戒范围将引发怪物的主动攻击       db_column: F_alert 第23个
     */
	private Integer  alert;
    /**
     * 巡逻范围(以怪物 出生点 为中心点) ,怪物初始化时在这个范围内移动',       db_column: F_patrol 第24个
     */
	private java.lang.Integer  patrol;
    /**
     * 追击范围(怪物出 出生点 为中心点) 超过了这个范围,怪物不再追击玩家,如果怪物处于战斗状态,则将引发向出生点跑去,并重置',       db_column: F_pursuit 第25个
     */
	private java.lang.Integer  pursuit;
    /**
     * 追击的概率(0-10000)       db_column: F_pursuit_probability 第26个
     */
	private java.lang.Integer  pursuitProbability;
    /**
     * 怪物的平砍技能id       db_column: F_skill_pingkan 第27个
     */
	private java.lang.Integer  skillPingkan;
    /**
     * 怪物平砍技能等级       db_column: F_skill_pingkangrade 第28个
     */
	private java.lang.Integer  skillPingkangrade;
    /**
     * 技能相关（技能id,等级;）       db_column: F_skill_relevance 第29个
     */
	private java.lang.String  skillRelevance;
    /**
     * 说话时间间隔以秒为单位       db_column: F_speak_time 第30个
     */
	private Integer  speakTime;
    /**
     * 怪物说话内容 如果多句话 中间以;分割       db_column: F_speaks 第31个
     */
	private java.lang.String  speaks;
    /**
     * 怪物尸体消失时间以秒为单位       db_column: F_revivification_time 第32个
     */
	private Integer  revivificationTime;
    /**
     * 物怪的职责 0随机巡逻 1 站立不动,2 向目标点移动       db_column: F_responsibility 第33个
     */
	private java.lang.Integer  responsibility;
    /**
     * 关卡       db_column: F_instance_id 第34个
     */
	private java.lang.Integer  instanceId;
    /**
     * 关卡怪物难度       db_column: F_difficult 第35个
     */
	private java.lang.Integer  difficult;
    /**
     * 0.物理1.法术 标识       db_column: F_magic_flag 第36个
     */
	private java.lang.Integer  magicFlag;
    /**
     * 死亡方式（1.被击倒地2.击飞倒地3.直立爆炸）       db_column: F_die 第37个
     */
	private java.lang.Integer  die;
	//columns END

	public MonsterModelData(){
	}

	public MonsterModelData(
		java.lang.Integer id
	){
		this.id = id;
	}

	/**
	 * id db_column: t_monster_model.F_id
	 */	
	public void setId(java.lang.Integer value) {
		this.id = value;
	}
	
	/**
     * id db_column: t_monster_model.F_id
     */
	public java.lang.Integer getId() {
		return this.id;
	}
	/**
	 * 怪物名称 db_column: t_monster_model.F_name
	 */	
	public void setName(java.lang.String value) {
		this.name = value;
	}
	
	/**
     * 怪物名称 db_column: t_monster_model.F_name
     */
	public java.lang.String getName() {
		return this.name;
	}
	/**
	 * 怪物描述 db_column: t_monster_model.F_desc
	 */	
	public void setDesc(java.lang.String value) {
		this.desc = value;
	}
	
	/**
     * 怪物描述 db_column: t_monster_model.F_desc
     */
	public java.lang.String getDesc() {
		return this.desc;
	}
	/**
	 * 怪物类型,普通1，精英2，boss3 db_column: t_monster_model.F_type
	 */	
	public void setType(Integer value) {
		this.type = value;
	}
	
	/**
     * 怪物类型,普通1，精英2，boss3 db_column: t_monster_model.F_type
     */
	public Integer getType() {
		return this.type;
	}
	/**
	 * 头像图标ID db_column: t_monster_model.F_head_icon_id
	 */	
	public void setHeadIconId(java.lang.Integer value) {
		this.headIconId = value;
	}
	
	/**
     * 头像图标ID db_column: t_monster_model.F_head_icon_id
     */
	public java.lang.Integer getHeadIconId() {
		return this.headIconId;
	}
	/**
	 * 怪物换装资源ID db_column: t_monster_model.F_avatar_id
	 */	
	public void setAvatarId(java.lang.Integer value) {
		this.avatarId = value;
	}
	
	/**
     * 怪物换装资源ID db_column: t_monster_model.F_avatar_id
     */
	public java.lang.Integer getAvatarId() {
		return this.avatarId;
	}
	/**
	 * 攻击时声音编号 db_column: t_monster_model.F_attack_audio
	 */	
	public void setAttackAudio(java.lang.Integer value) {
		this.attackAudio = value;
	}
	
	/**
     * 攻击时声音编号 db_column: t_monster_model.F_attack_audio
     */
	public java.lang.Integer getAttackAudio() {
		return this.attackAudio;
	}
	/**
	 * 被攻击的声音 db_column: t_monster_model.F_hurt_audio
	 */	
	public void setHurtAudio(java.lang.Integer value) {
		this.hurtAudio = value;
	}
	
	/**
     * 被攻击的声音 db_column: t_monster_model.F_hurt_audio
     */
	public java.lang.Integer getHurtAudio() {
		return this.hurtAudio;
	}
	/**
	 * 死亡时的声音编号 db_column: t_monster_model.F_die_audio
	 */	
	public void setDieAudio(java.lang.Integer value) {
		this.dieAudio = value;
	}
	
	/**
     * 死亡时的声音编号 db_column: t_monster_model.F_die_audio
     */
	public java.lang.Integer getDieAudio() {
		return this.dieAudio;
	}
	/**
	 * 等级 db_column: t_monster_model.F_grade
	 */	
	public void setGrade(Integer value) {
		this.grade = value;
	}
	
	/**
     * 等级 db_column: t_monster_model.F_grade
     */
	public Integer getGrade() {
		return this.grade;
	}
	/**
	 * 生命值 db_column: t_monster_model.F_hp
	 */	
	public void setHp(java.lang.Integer value) {
		this.hp = value;
	}
	
	/**
     * 生命值 db_column: t_monster_model.F_hp
     */
	public java.lang.Integer getHp() {
		return this.hp;
	}
	/**
	 * 法术攻击 db_column: t_monster_model.F_fattack
	 */	
	public void setFattack(java.lang.Integer value) {
		this.fattack = value;
	}
	
	/**
     * 法术攻击 db_column: t_monster_model.F_fattack
     */
	public java.lang.Integer getFattack() {
		return this.fattack;
	}
	/**
	 * 物理攻击 db_column: t_monster_model.F_wattack
	 */	
	public void setWattack(java.lang.Integer value) {
		this.wattack = value;
	}
	
	/**
     * 物理攻击 db_column: t_monster_model.F_wattack
     */
	public java.lang.Integer getWattack() {
		return this.wattack;
	}
	/**
	 * 法术防御 db_column: t_monster_model.F_fdefence
	 */	
	public void setFdefence(java.lang.Integer value) {
		this.fdefence = value;
	}
	
	/**
     * 法术防御 db_column: t_monster_model.F_fdefence
     */
	public java.lang.Integer getFdefence() {
		return this.fdefence;
	}
	/**
	 * 物理防御 db_column: t_monster_model.F_wdefence
	 */	
	public void setWdefence(java.lang.Integer value) {
		this.wdefence = value;
	}
	
	/**
     * 物理防御 db_column: t_monster_model.F_wdefence
     */
	public java.lang.Integer getWdefence() {
		return this.wdefence;
	}
	/**
	 * 破击 db_column: t_monster_model.F_blow
	 */	
	public void setBlow(java.lang.Integer value) {
		this.blow = value;
	}
	
	/**
     * 破击 db_column: t_monster_model.F_blow
     */
	public java.lang.Integer getBlow() {
		return this.blow;
	}
	/**
	 * 暴击 db_column: t_monster_model.F_crt
	 */	
	public void setCrt(java.lang.Integer value) {
		this.crt = value;
	}
	
	/**
     * 暴击 db_column: t_monster_model.F_crt
     */
	public java.lang.Integer getCrt() {
		return this.crt;
	}
	/**
	 * 格挡 db_column: t_monster_model.F_block
	 */	
	public void setBlock(java.lang.Integer value) {
		this.block = value;
	}
	
	/**
     * 格挡 db_column: t_monster_model.F_block
     */
	public java.lang.Integer getBlock() {
		return this.block;
	}
	/**
	 * 能量 db_column: t_monster_model.F_mp
	 */	
	public void setMp(java.lang.Integer value) {
		this.mp = value;
	}
	
	/**
     * 能量 db_column: t_monster_model.F_mp
     */
	public java.lang.Integer getMp() {
		return this.mp;
	}
	/**
	 * 暴击伤害 db_column: t_monster_model.F_damage
	 */	
	public void setDamage(java.lang.Integer value) {
		this.damage = value;
	}
	
	/**
     * 暴击伤害 db_column: t_monster_model.F_damage
     */
	public java.lang.Integer getDamage() {
		return this.damage;
	}
	/**
	 * 变身变态倍数 db_column: t_monster_model.F_abnormal
	 */	
	public void setAbnormal(Integer value) {
		this.abnormal = value;
	}
	
	/**
     * 变身变态倍数 db_column: t_monster_model.F_abnormal
     */
	public Integer getAbnormal() {
		return this.abnormal;
	}
	/**
	 * 攻击设定，主动攻击1/被动攻击2 db_column: t_monster_model.F_is
	 */	
	public void setIs(Integer value) {
		this.is = value;
	}
	
	/**
     * 攻击设定，主动攻击1/被动攻击2 db_column: t_monster_model.F_is
     */
	public Integer getIs() {
		return this.is;
	}
	/**
	 * 警戒范围(以怪物 当前点 为中心点) 主动攻击怪和角色间距离进入警戒范围将引发怪物的主动攻击 db_column: t_monster_model.F_alert
	 */	
	public void setAlert(Integer value) {
		this.alert = value;
	}
	
	/**
     * 警戒范围(以怪物 当前点 为中心点) 主动攻击怪和角色间距离进入警戒范围将引发怪物的主动攻击 db_column: t_monster_model.F_alert
     */
	public Integer getAlert() {
		return this.alert;
	}
	/**
	 * 巡逻范围(以怪物 出生点 为中心点) ,怪物初始化时在这个范围内移动', db_column: t_monster_model.F_patrol
	 */	
	public void setPatrol(java.lang.Integer value) {
		this.patrol = value;
	}
	
	/**
     * 巡逻范围(以怪物 出生点 为中心点) ,怪物初始化时在这个范围内移动', db_column: t_monster_model.F_patrol
     */
	public java.lang.Integer getPatrol() {
		return this.patrol;
	}
	/**
	 * 追击范围(怪物出 出生点 为中心点) 超过了这个范围,怪物不再追击玩家,如果怪物处于战斗状态,则将引发向出生点跑去,并重置', db_column: t_monster_model.F_pursuit
	 */	
	public void setPursuit(java.lang.Integer value) {
		this.pursuit = value;
	}
	
	/**
     * 追击范围(怪物出 出生点 为中心点) 超过了这个范围,怪物不再追击玩家,如果怪物处于战斗状态,则将引发向出生点跑去,并重置', db_column: t_monster_model.F_pursuit
     */
	public java.lang.Integer getPursuit() {
		return this.pursuit;
	}
	/**
	 * 追击的概率(0-10000) db_column: t_monster_model.F_pursuit_probability
	 */	
	public void setPursuitProbability(java.lang.Integer value) {
		this.pursuitProbability = value;
	}
	
	/**
     * 追击的概率(0-10000) db_column: t_monster_model.F_pursuit_probability
     */
	public java.lang.Integer getPursuitProbability() {
		return this.pursuitProbability;
	}
	/**
	 * 怪物的平砍技能id db_column: t_monster_model.F_skill_pingkan
	 */	
	public void setSkillPingkan(java.lang.Integer value) {
		this.skillPingkan = value;
	}
	
	/**
     * 怪物的平砍技能id db_column: t_monster_model.F_skill_pingkan
     */
	public java.lang.Integer getSkillPingkan() {
		return this.skillPingkan;
	}
	/**
	 * 怪物平砍技能等级 db_column: t_monster_model.F_skill_pingkangrade
	 */	
	public void setSkillPingkangrade(java.lang.Integer value) {
		this.skillPingkangrade = value;
	}
	
	/**
     * 怪物平砍技能等级 db_column: t_monster_model.F_skill_pingkangrade
     */
	public java.lang.Integer getSkillPingkangrade() {
		return this.skillPingkangrade;
	}
	/**
	 * 技能相关（技能id,等级;） db_column: t_monster_model.F_skill_relevance
	 */	
	public void setSkillRelevance(java.lang.String value) {
		this.skillRelevance = value;
	}
	
	/**
     * 技能相关（技能id,等级;） db_column: t_monster_model.F_skill_relevance
     */
	public java.lang.String getSkillRelevance() {
		return this.skillRelevance;
	}
	/**
	 * 说话时间间隔以秒为单位 db_column: t_monster_model.F_speak_time
	 */	
	public void setSpeakTime(Integer value) {
		this.speakTime = value;
	}
	
	/**
     * 说话时间间隔以秒为单位 db_column: t_monster_model.F_speak_time
     */
	public Integer getSpeakTime() {
		return this.speakTime;
	}
	/**
	 * 怪物说话内容 如果多句话 中间以;分割 db_column: t_monster_model.F_speaks
	 */	
	public void setSpeaks(java.lang.String value) {
		this.speaks = value;
	}
	
	/**
     * 怪物说话内容 如果多句话 中间以;分割 db_column: t_monster_model.F_speaks
     */
	public java.lang.String getSpeaks() {
		return this.speaks;
	}
	/**
	 * 怪物尸体消失时间以秒为单位 db_column: t_monster_model.F_revivification_time
	 */	
	public void setRevivificationTime(Integer value) {
		this.revivificationTime = value;
	}
	
	/**
     * 怪物尸体消失时间以秒为单位 db_column: t_monster_model.F_revivification_time
     */
	public Integer getRevivificationTime() {
		return this.revivificationTime;
	}
	/**
	 * 物怪的职责 0随机巡逻 1 站立不动,2 向目标点移动 db_column: t_monster_model.F_responsibility
	 */	
	public void setResponsibility(java.lang.Integer value) {
		this.responsibility = value;
	}
	
	/**
     * 物怪的职责 0随机巡逻 1 站立不动,2 向目标点移动 db_column: t_monster_model.F_responsibility
     */
	public java.lang.Integer getResponsibility() {
		return this.responsibility;
	}
	/**
	 * 关卡 db_column: t_monster_model.F_instance_id
	 */	
	public void setInstanceId(java.lang.Integer value) {
		this.instanceId = value;
	}
	
	/**
     * 关卡 db_column: t_monster_model.F_instance_id
     */
	public java.lang.Integer getInstanceId() {
		return this.instanceId;
	}
	/**
	 * 关卡怪物难度 db_column: t_monster_model.F_difficult
	 */	
	public void setDifficult(java.lang.Integer value) {
		this.difficult = value;
	}
	
	/**
     * 关卡怪物难度 db_column: t_monster_model.F_difficult
     */
	public java.lang.Integer getDifficult() {
		return this.difficult;
	}
	/**
	 * 0.物理1.法术 标识 db_column: t_monster_model.F_magic_flag
	 */	
	public void setMagicFlag(java.lang.Integer value) {
		this.magicFlag = value;
	}
	
	/**
     * 0.物理1.法术 标识 db_column: t_monster_model.F_magic_flag
     */
	public java.lang.Integer getMagicFlag() {
		return this.magicFlag;
	}
	/**
	 * 死亡方式（1.被击倒地2.击飞倒地3.直立爆炸） db_column: t_monster_model.F_die
	 */	
	public void setDie(java.lang.Integer value) {
		this.die = value;
	}
	
	/**
     * 死亡方式（1.被击倒地2.击飞倒地3.直立爆炸） db_column: t_monster_model.F_die
     */
	public java.lang.Integer getDie() {
		return this.die;
	}

	@Override
	public String toString() {
		return ToStringBuilder.reflectionToString(this);
	}
	
	@Override
	public int hashCode() {
		return new HashCodeBuilder().append(getId()).toHashCode();
	}
	
	@Override
	public boolean equals(Object obj) {
		if(obj instanceof MonsterModelData == false){ return false;}
		if(this == obj) {return true;}
		MonsterModelData other = (MonsterModelData)obj;
		return new EqualsBuilder().append(getId(),other.getId()).isEquals();
	}
}

